{
	"info": {
		"_postman_id": "c9c2ca16-2d5c-4739-b8ee-6d48c447480a",
		"name": "GoIT",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "25694159"
	},
	"item": [
		{
			"name": "Name of all boards",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Checking the status code\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Checking the execution time of the request\r",
							"pm.test(\"Response time is less than 500ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://api.trello.com/1/members/me/boards?fields=name,url&key={{apiKey}}&token={{apiToken}}",
					"protocol": "https",
					"host": [
						"api",
						"trello",
						"com"
					],
					"path": [
						"1",
						"members",
						"me",
						"boards"
					],
					"query": [
						{
							"key": "fields",
							"value": "name,url"
						},
						{
							"key": "key",
							"value": "{{apiKey}}"
						},
						{
							"key": "token",
							"value": "{{apiToken}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "List of all boards",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Checking the status code\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Checking the execution time of the request\r",
							"pm.test(\"Response time is less than 500ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://api.trello.com/1/members/me/boards?key={{apiKey}}&token={{apiToken}}",
					"protocol": "https",
					"host": [
						"api",
						"trello",
						"com"
					],
					"path": [
						"1",
						"members",
						"me",
						"boards"
					],
					"query": [
						{
							"key": "key",
							"value": "{{apiKey}}"
						},
						{
							"key": "token",
							"value": "{{apiToken}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Create a new board",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// We generate a random name for the new board\r",
							"const boardName = \"Board \" + Math.random().toString(36).substring(7);\r",
							"// Now let's put this name in the request parameters\r",
							"pm.variables.set(\"name\", boardName);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"let jsonData = pm.response.json();\r",
							"pm.environment.set (\"boardId\", jsonData.id);\r",
							"pm.environment.set (\"boardName\", jsonData.name);\r",
							"\r",
							"// Checking the status code\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Checking the execution time of the request\r",
							"pm.test(\"Response time is less than 500ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
							"});\r",
							"\r",
							"// Checking the type of the \"name\" property\r",
							"pm.test(\"Value of 'name' is a string\", function () {\r",
							"    pm.expect(pm.response.json().name).to.be.a(\"string\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "urlencoded",
					"urlencoded": [
						{
							"key": "name",
							"value": "",
							"type": "text",
							"disabled": true
						}
					]
				},
				"url": {
					"raw": "https://api.trello.com/1/boards/?name={{name}}&key={{apiKey}}&token={{apiToken}}",
					"protocol": "https",
					"host": [
						"api",
						"trello",
						"com"
					],
					"path": [
						"1",
						"boards",
						""
					],
					"query": [
						{
							"key": "name",
							"value": "{{name}}"
						},
						{
							"key": "key",
							"value": "{{apiKey}}"
						},
						{
							"key": "token",
							"value": "{{apiToken}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get new board",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Checking the status code\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Checking the execution time of the request\r",
							"pm.test(\"Response time is less than 500ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
							"});\r",
							"\r",
							"// Checking the type of the \"name\" property\r",
							"pm.test(\"Value of 'name' is a string\", function () {\r",
							"    pm.expect(pm.response.json().name).to.be.a(\"string\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://api.trello.com/1/boards/{{boardId}}?key={{apiKey}}&token={{apiToken}}",
					"protocol": "https",
					"host": [
						"api",
						"trello",
						"com"
					],
					"path": [
						"1",
						"boards",
						"{{boardId}}"
					],
					"query": [
						{
							"key": "key",
							"value": "{{apiKey}}"
						},
						{
							"key": "token",
							"value": "{{apiToken}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Lists of a board",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Checking the status code\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Checking the execution time of the request\r",
							"pm.test(\"Response time is less than 500ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://api.trello.com/1/boards/{{boardId}}/lists?key={{apiKey}}&token={{apiToken}}",
					"protocol": "https",
					"host": [
						"api",
						"trello",
						"com"
					],
					"path": [
						"1",
						"boards",
						"{{boardId}}",
						"lists"
					],
					"query": [
						{
							"key": "key",
							"value": "{{apiKey}}"
						},
						{
							"key": "token",
							"value": "{{apiToken}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Create a new list on the left",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// We generate a random name for the letter on the board\r",
							"const listName = \"List on left \" + Math.random().toString(36).substring(7);\r",
							"// Now let's put the received name in the request parameter\r",
							"pm.variables.set(\"name\", listName);\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"let jsonData = pm.response.json();\r",
							"pm.environment.set (\"LeftListId\", jsonData.id);\r",
							"\r",
							"// Checking the status code\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Checking the execution time of the request\r",
							"pm.test(\"Response time is less than 500ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
							"});\r",
							"\r",
							"// Checking the type of the \"name\" property\r",
							"pm.test(\"Value of 'name' is a string\", function () {\r",
							"    pm.expect(pm.response.json().name).to.be.a(\"string\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "https://api.trello.com/1/boards/{{boardId}}/lists?name={{name}}&key={{apiKey}}&token={{apiToken}}&pos=top",
					"protocol": "https",
					"host": [
						"api",
						"trello",
						"com"
					],
					"path": [
						"1",
						"boards",
						"{{boardId}}",
						"lists"
					],
					"query": [
						{
							"key": "name",
							"value": "{{name}}"
						},
						{
							"key": "key",
							"value": "{{apiKey}}"
						},
						{
							"key": "token",
							"value": "{{apiToken}}"
						},
						{
							"key": "pos",
							"value": "top"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Create a new list on the right",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// We generate a random name for the letter on the board on the right\r",
							"const listName = \"List on right \" + Math.random().toString(36).substring(7);\r",
							"// Now let's put the received name in the request parameter\r",
							"pm.variables.set(\"name\", listName);\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"let jsonData = pm.response.json();\r",
							"pm.environment.set (\"RightListId\", jsonData.id);\r",
							"\r",
							"// Checking the status code\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Checking the execution time of the request\r",
							"pm.test(\"Response time is less than 500ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
							"});\r",
							"\r",
							"// Checking the type of the \"name\" property\r",
							"pm.test(\"Value of 'name' is a string\", function () {\r",
							"    pm.expect(pm.response.json().name).to.be.a(\"string\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "https://api.trello.com/1/boards/{{boardId}}/lists?name={{name}}&key={{apiKey}}&token={{apiToken}}&pos=bottom",
					"protocol": "https",
					"host": [
						"api",
						"trello",
						"com"
					],
					"path": [
						"1",
						"boards",
						"{{boardId}}",
						"lists"
					],
					"query": [
						{
							"key": "name",
							"value": "{{name}}"
						},
						{
							"key": "key",
							"value": "{{apiKey}}"
						},
						{
							"key": "token",
							"value": "{{apiToken}}"
						},
						{
							"key": "pos",
							"value": "bottom"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Lists of a board after creation",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Checking the status code\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Checking the execution time of the request\r",
							"pm.test(\"Response time is less than 500ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
							"});\r",
							"\r",
							"// Отримання об'єкта JSON з відповіді\r",
							"const responseBodyVar = pm.response.json();\r",
							"\r",
							"// Перевіряємо, що id є стрінгою\r",
							"pm.test(\"id is a string\", function() {\r",
							"  pm.expect(typeof responseBodyVar.id).to.be.a('string');\r",
							"});\r",
							"\r"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://api.trello.com/1/boards/{{boardId}}/lists?key={{apiKey}}&token={{apiToken}}",
					"protocol": "https",
					"host": [
						"api",
						"trello",
						"com"
					],
					"path": [
						"1",
						"boards",
						"{{boardId}}",
						"lists"
					],
					"query": [
						{
							"key": "key",
							"value": "{{apiKey}}"
						},
						{
							"key": "token",
							"value": "{{apiToken}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "A new card on left list",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Checking the status code\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Checking the execution time of the request\r",
							"pm.test(\"Response time is less than 500ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
							"});\r",
							"\r",
							"// Checking the type of the \"id\" property\r",
							"pm.test(\"Value of 'id' is a string\", function () {\r",
							"    pm.expect(pm.response.json().id).to.be.a(\"string\");\r",
							"});\r",
							"\r",
							"let jsonData = pm.response.json();\r",
							"pm.environment.set (\"cardId\", jsonData.id);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// We generate a random name for the new board\r",
							"const cardName = \"Card \" + Math.random().toString(36).substring(7);\r",
							"// Now let's put this name in the request parameters\r",
							"pm.variables.set(\"name\", cardName);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "https://api.trello.com/1/cards?idList={{LeftListId}}&key={{apiKey}}&token={{apiToken}}&name={{name}}",
					"protocol": "https",
					"host": [
						"api",
						"trello",
						"com"
					],
					"path": [
						"1",
						"cards"
					],
					"query": [
						{
							"key": "idList",
							"value": "{{LeftListId}}"
						},
						{
							"key": "key",
							"value": "{{apiKey}}"
						},
						{
							"key": "token",
							"value": "{{apiToken}}"
						},
						{
							"key": "name",
							"value": "{{name}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "A new card on right list",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Checking the status code\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Checking the execution time of the request\r",
							"pm.test(\"Response time is less than 500ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
							"});\r",
							"\r",
							"// Checking the type of the \"id\" property\r",
							"pm.test(\"Value of 'id' is a string\", function () {\r",
							"    pm.expect(pm.response.json().id).to.be.a(\"string\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "https://api.trello.com/1/cards?idList={{RightListId}}&key={{apiKey}}&token={{apiToken}}",
					"protocol": "https",
					"host": [
						"api",
						"trello",
						"com"
					],
					"path": [
						"1",
						"cards"
					],
					"query": [
						{
							"key": "idList",
							"value": "{{RightListId}}"
						},
						{
							"key": "key",
							"value": "{{apiKey}}"
						},
						{
							"key": "token",
							"value": "{{apiToken}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Cards in a LeftList",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Checking the status code\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Checking the execution time of the request\r",
							"pm.test(\"Response time is less than 500ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
							"});\r",
							"\r"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://api.trello.com/1/lists/{{LeftListId}}/cards?key={{apiKey}}&token={{apiToken}}",
					"protocol": "https",
					"host": [
						"api",
						"trello",
						"com"
					],
					"path": [
						"1",
						"lists",
						"{{LeftListId}}",
						"cards"
					],
					"query": [
						{
							"key": "key",
							"value": "{{apiKey}}"
						},
						{
							"key": "token",
							"value": "{{apiToken}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Update a board",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Checking the status code\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Checking the execution time of the request\r",
							"pm.test(\"Response time is less than 500ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "https://api.trello.com/1/boards/{{boardId}}?key={{apiKey}}&token={{apiToken}}&name=GoIT&desc=board for learning",
					"protocol": "https",
					"host": [
						"api",
						"trello",
						"com"
					],
					"path": [
						"1",
						"boards",
						"{{boardId}}"
					],
					"query": [
						{
							"key": "key",
							"value": "{{apiKey}}"
						},
						{
							"key": "token",
							"value": "{{apiToken}}"
						},
						{
							"key": "name",
							"value": "GoIT"
						},
						{
							"key": "desc",
							"value": "board for learning"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete a board",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Checking the status code\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Checking the execution time of the request\r",
							"// pm.test(\"Response time is less than 500ms\", function () {\r",
							"//     pm.expect(pm.response.responseTime).to.be.below(500);\r",
							"// });"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "https://api.trello.com/1/boards/{{boardId}}?key={{apiKey}}&token={{apiToken}}",
					"protocol": "https",
					"host": [
						"api",
						"trello",
						"com"
					],
					"path": [
						"1",
						"boards",
						"{{boardId}}"
					],
					"query": [
						{
							"key": "key",
							"value": "{{apiKey}}"
						},
						{
							"key": "token",
							"value": "{{apiToken}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Check the deleted board",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Checking the status code\r",
							"pm.test(\"Status code is 404\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"// Checking the execution time of the request\r",
							"pm.test(\"Response time is less than 500ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "https://api.trello.com/1/boards/{{boardId}}?key={{apiKey}}&token={{apiToken}}",
					"protocol": "https",
					"host": [
						"api",
						"trello",
						"com"
					],
					"path": [
						"1",
						"boards",
						"{{boardId}}"
					],
					"query": [
						{
							"key": "key",
							"value": "{{apiKey}}"
						},
						{
							"key": "token",
							"value": "{{apiToken}}"
						}
					]
				}
			},
			"response": []
		}
	]
}